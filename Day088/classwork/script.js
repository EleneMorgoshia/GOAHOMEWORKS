//განვლილი მასალის გამეორება
//1)scope
//scope - ცვლადები როგორ მუშაობენ მაგას განნსაზღვრავს
//block scope  and global scope and function scope
//block scope - ვიყენებთ let-ს და const-ს ( როდესაც let-ით და const-ით ვქმნით ცვლადებს,მაგათი გამოყენება ბლოკის გარეთ არ შეგვიძლია!)
//function scope - თუ var -ის გამოყენებით გვაქვს შექმნილი ცვლადი, ბლოკის გარეთ შეგვიძლია მივწვეთ მათ ( მაგ: თუ ფუნქციაშ ი შევქმენით ცვლადი var -ით ,მისი გამოყენება შეგვიძლია ფუნქციის გარეთაც!)
//global scope - ყველანაირი ბლოკის და ფუნქციის გარეთ შექმნილი ცვლადები, რომელთა შექმნის შემდეგ შემიძლია ისინი გამოვიყენო რამდენჯერაც მომინდება იმდენჯერ 
///////////////////////////////////////////////////////////////
//2) arrow funcions
//arrow function - ჩვეულებრივი ფუნქციისგან განსხვავებით , სინტაქსი აქვს სხვანაირი(function-ს არ უწერ , უწერ const-ს ან ნებისმიერ სხვა ცვლადს)
//მაგ:
let myFunc = ()=> {
    //ფრჩხილებში გადავცემთ პარამეტრებს 
    
}

//შეგვიძლი ერთ ხაზშიც დავწეროთ : მაგგ:
let myFunction = () => console.log('Hello') // აქ ფიგურული ფრჩხილი არ უნდა 
/////////////////////////////////////////////////////////////
//3)loops
//სიის ელემენტებს მივწვდეთ of -ით ან in-ით
//განსხვავება - of -ით ვწვდებით სიის ელემენტებს , in- ით ვწვდებით ობიექტის ელემენტებს 
for(let numbers of array){
    console.lof(numbers) // დაბეჭდავს სიის ელემენტებს
}

for(let char in wordsArray){
    console.log(wordsArray[char]) // მიწვდება თითოეული სიტყვის,თითოეულ ასოს
}
///////////////////////////////////////////////
//4)foreach
//foreach - იგივე რაც ლუფები - მათი მეშვეობით შეგვიძლიაა გადავუაროთ სიას,ან ობიექტს და დავაბრუნოთ  ელემენტები 
//არ მუშაობს სტრინგებზე, მუშაობს მხოლოს სიებზე
//მაგ:

let namesArray = ['Elene']
namesArray.forEach((char) => {
    console.log(char)
})
